/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsImport } from './routes/terms'
import { Route as StatsImport } from './routes/stats'
import { Route as SavedTextImport } from './routes/saved-text'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as PracticeImport } from './routes/practice'
import { Route as GuideImport } from './routes/guide'
import { Route as CustomTextImport } from './routes/custom-text'
import { Route as CodeImport } from './routes/code'
import { Route as BnpracticeImport } from './routes/bnpractice'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TermsRoute = TermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const StatsRoute = StatsImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => rootRoute,
} as any)

const SavedTextRoute = SavedTextImport.update({
  id: '/saved-text',
  path: '/saved-text',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const PracticeRoute = PracticeImport.update({
  id: '/practice',
  path: '/practice',
  getParentRoute: () => rootRoute,
} as any)

const GuideRoute = GuideImport.update({
  id: '/guide',
  path: '/guide',
  getParentRoute: () => rootRoute,
} as any)

const CustomTextRoute = CustomTextImport.update({
  id: '/custom-text',
  path: '/custom-text',
  getParentRoute: () => rootRoute,
} as any)

const CodeRoute = CodeImport.update({
  id: '/code',
  path: '/code',
  getParentRoute: () => rootRoute,
} as any)

const BnpracticeRoute = BnpracticeImport.update({
  id: '/bnpractice',
  path: '/bnpractice',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/bnpractice': {
      id: '/bnpractice'
      path: '/bnpractice'
      fullPath: '/bnpractice'
      preLoaderRoute: typeof BnpracticeImport
      parentRoute: typeof rootRoute
    }
    '/code': {
      id: '/code'
      path: '/code'
      fullPath: '/code'
      preLoaderRoute: typeof CodeImport
      parentRoute: typeof rootRoute
    }
    '/custom-text': {
      id: '/custom-text'
      path: '/custom-text'
      fullPath: '/custom-text'
      preLoaderRoute: typeof CustomTextImport
      parentRoute: typeof rootRoute
    }
    '/guide': {
      id: '/guide'
      path: '/guide'
      fullPath: '/guide'
      preLoaderRoute: typeof GuideImport
      parentRoute: typeof rootRoute
    }
    '/practice': {
      id: '/practice'
      path: '/practice'
      fullPath: '/practice'
      preLoaderRoute: typeof PracticeImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/saved-text': {
      id: '/saved-text'
      path: '/saved-text'
      fullPath: '/saved-text'
      preLoaderRoute: typeof SavedTextImport
      parentRoute: typeof rootRoute
    }
    '/stats': {
      id: '/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof StatsImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/bnpractice': typeof BnpracticeRoute
  '/code': typeof CodeRoute
  '/custom-text': typeof CustomTextRoute
  '/guide': typeof GuideRoute
  '/practice': typeof PracticeRoute
  '/privacy': typeof PrivacyRoute
  '/saved-text': typeof SavedTextRoute
  '/stats': typeof StatsRoute
  '/terms': typeof TermsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/bnpractice': typeof BnpracticeRoute
  '/code': typeof CodeRoute
  '/custom-text': typeof CustomTextRoute
  '/guide': typeof GuideRoute
  '/practice': typeof PracticeRoute
  '/privacy': typeof PrivacyRoute
  '/saved-text': typeof SavedTextRoute
  '/stats': typeof StatsRoute
  '/terms': typeof TermsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/bnpractice': typeof BnpracticeRoute
  '/code': typeof CodeRoute
  '/custom-text': typeof CustomTextRoute
  '/guide': typeof GuideRoute
  '/practice': typeof PracticeRoute
  '/privacy': typeof PrivacyRoute
  '/saved-text': typeof SavedTextRoute
  '/stats': typeof StatsRoute
  '/terms': typeof TermsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/bnpractice'
    | '/code'
    | '/custom-text'
    | '/guide'
    | '/practice'
    | '/privacy'
    | '/saved-text'
    | '/stats'
    | '/terms'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/bnpractice'
    | '/code'
    | '/custom-text'
    | '/guide'
    | '/practice'
    | '/privacy'
    | '/saved-text'
    | '/stats'
    | '/terms'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/bnpractice'
    | '/code'
    | '/custom-text'
    | '/guide'
    | '/practice'
    | '/privacy'
    | '/saved-text'
    | '/stats'
    | '/terms'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  BnpracticeRoute: typeof BnpracticeRoute
  CodeRoute: typeof CodeRoute
  CustomTextRoute: typeof CustomTextRoute
  GuideRoute: typeof GuideRoute
  PracticeRoute: typeof PracticeRoute
  PrivacyRoute: typeof PrivacyRoute
  SavedTextRoute: typeof SavedTextRoute
  StatsRoute: typeof StatsRoute
  TermsRoute: typeof TermsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  BnpracticeRoute: BnpracticeRoute,
  CodeRoute: CodeRoute,
  CustomTextRoute: CustomTextRoute,
  GuideRoute: GuideRoute,
  PracticeRoute: PracticeRoute,
  PrivacyRoute: PrivacyRoute,
  SavedTextRoute: SavedTextRoute,
  StatsRoute: StatsRoute,
  TermsRoute: TermsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/bnpractice",
        "/code",
        "/custom-text",
        "/guide",
        "/practice",
        "/privacy",
        "/saved-text",
        "/stats",
        "/terms"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/bnpractice": {
      "filePath": "bnpractice.tsx"
    },
    "/code": {
      "filePath": "code.tsx"
    },
    "/custom-text": {
      "filePath": "custom-text.tsx"
    },
    "/guide": {
      "filePath": "guide.tsx"
    },
    "/practice": {
      "filePath": "practice.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/saved-text": {
      "filePath": "saved-text.tsx"
    },
    "/stats": {
      "filePath": "stats.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
